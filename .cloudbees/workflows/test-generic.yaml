apiVersion: automation.cloudbees.io/v1alpha1
kind: workflow
name: Shared Test Template

on:
  workflow_call:
    inputs:
      app_name:
        type: string
        required: true
      language:
        type: string
        required: true        # go | node | python
      coverage_root:
        type: string
        required: false
        default: src
      debug:
        type: string
        required: false
        default: "false"

jobs:
  test:
    # Expose a single normalized output to callers
    outputs:
      CODE_COVERAGE: ${{ steps.ChooseCoverage.outputs.CODE_COVERAGE }}
    steps:
      - name: Checkout source
        uses: cloudbees-io/checkout@v1

      # ----------------------- GO -----------------------
      - name: Run Go tests
        if: ${{ inputs.language == 'go' }}
        id: GoTests
        kind: test
        uses: docker://golang:1.24-alpine
        env:
          CI: "true"
          DEBUG: ${{ inputs.debug }}
        run: |
          set -eu
          apk add --no-cache git curl
          go install github.com/jstemmer/go-junit-report/v2@latest

          set +e
          set -o pipefail
          go test ./... -v -coverprofile=coverage.out 2>&1 | tee test_stdout.txt
          STATUS=$?
          set +o pipefail
          set -e

          "$(go env GOPATH)"/bin/go-junit-report -set-exit-code < test_stdout.txt > junit.xml || true

          if [ -f coverage.out ]; then
            go tool cover -func=coverage.out > coverage_summary.txt
            { echo '```'; cat coverage_summary.txt; echo '```'; } > "$CLOUDBEES_OUTPUTS/CODE_COVERAGE"
          else
            { echo '```'; echo '(no coverage output captured)'; echo '```'; } > "$CLOUDBEES_OUTPUTS/CODE_COVERAGE"
          fi

          exit $STATUS

      - name: Publish Go test results
        if: ${{ inputs.language == 'go' }}
        kind: test
        uses: cloudbees-io/publish-test-results@v1
        with:
          test-type: JUnit
          folder-name: ${{ cloudbees.workspace }}

      - name: Publish Go evidence
        if: ${{ inputs.language == 'go' }}
        kind: test
        uses: cloudbees-io/publish-evidence-item@v1
        with:
          format: MARKDOWN
          content: |
            ## Test Stage (Go)
            Code coverage (if available):
            ${{ steps.GoTests.outputs.CODE_COVERAGE }}

      # ---------------------- NODE ----------------------
      - name: Run Node tests
        if: ${{ inputs.language == 'node' }}
        id: NodeTests
        kind: test
        uses: docker://node:20-alpine
        env:
          CI: "true"
          JEST_JUNIT_OUTPUT: ${{ cloudbees.workspace }}/junit.xml
          COVERAGE_ROOT: ${{ inputs.coverage_root }}
          DEBUG: ${{ inputs.debug }}
          # >>> make tests deterministic <<<
          REACT_APP_LOGIN_LABEL: "Login"
          REACT_APP_SHOW_BETA: "1"
          REACT_APP_SHOW_DEBUG_FOOTER: "1"
        run: |
          set -eu
          apk add --no-cache git
          echo "Node: $(node -v)"; echo "NPM: $(npm -v)"
          npm ci
          npm i -D jest-junit

          set +e
          set -o pipefail
          npx react-scripts test --watchAll=false \
            --reporters=default --reporters=jest-junit \
            --coverage \
            --coverageReporters=text --coverageReporters=json-summary \
            --collectCoverageFrom="${COVERAGE_ROOT}/**/*.{js,jsx,ts,tsx}" \
            --collectCoverageFrom="!${COVERAGE_ROOT}/**/*.test.{js,jsx,ts,tsx}" \
            --collectCoverageFrom="!${COVERAGE_ROOT}/**/__tests__/**" \
            --collectCoverageFrom="!${COVERAGE_ROOT}/**/__mocks__/**" \
            --collectCoverageFrom="!${COVERAGE_ROOT}/**/mocks/**" \
            --collectCoverageFrom="!${COVERAGE_ROOT}/**/*.{story,stories}.{js,jsx,ts,tsx}" \
            --collectCoverageFrom="!${COVERAGE_ROOT}/setupTests.{js,ts,tsx}" \
            --collectCoverageFrom="!${COVERAGE_ROOT}/index.{js,jsx,ts,tsx}" \
            --collectCoverageFrom="!${COVERAGE_ROOT}/main.{js,jsx,ts,tsx}" \
            --collectCoverageFrom="!**/*.d.ts" \
          | tee coverage_stdout.txt
          STATUS=$?
          set +o pipefail
          set -e

          if [ -s coverage_stdout.txt ]; then
            { echo '```'; cat coverage_stdout.txt; echo '```'; } > "$CLOUDBEES_OUTPUTS/CODE_COVERAGE"
          else
            { echo '```'; echo '(no coverage output captured)'; echo '```'; } > "$CLOUDBEES_OUTPUTS/CODE_COVERAGE"
          fi

          exit $STATUS

      - name: Publish Node test results
        if: ${{ inputs.language == 'node' }}
        kind: test
        uses: cloudbees-io/publish-test-results@v1
        with:
          test-type: JUnit
          folder-name: ${{ cloudbees.workspace }}/junit.xml

      - name: Publish Node evidence
        if: ${{ inputs.language == 'node' }}
        kind: test
        uses: cloudbees-io/publish-evidence-item@v1
        with:
          format: MARKDOWN
          content: |
            ## Test Stage (Node)
            Code coverage (if available):
            ${{ steps.NodeTests.outputs.CODE_COVERAGE }}

      # --------------------- PYTHON ---------------------
      - name: Run Python tests
        if: ${{ inputs.language == 'python' }}
        id: PyTests
        kind: test
        uses: docker://python:3.11-alpine
        env:
          CI: "true"
          DEBUG: ${{ inputs.debug }}
        run: |
          set -eu
          apk add --no-cache gcc musl-dev
          pip install -U pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pytest pytest-cov junit-xml

          set +e
          set -o pipefail
          pytest --junitxml=junit.xml --cov=. --cov-report=term-missing \
          | tee coverage_stdout.txt
          STATUS=$?
          set +o pipefail
          set -e

          if [ -s coverage_stdout.txt ]; then
            { echo '```'; cat coverage_stdout.txt; echo '```'; } > "$CLOUDBEES_OUTPUTS/CODE_COVERAGE"
          else
            { echo '```'; echo '(no coverage output captured)'; echo '```'; } > "$CLOUDBEES_OUTPUTS/CODE_COVERAGE"
          fi

          exit $STATUS

      - name: Publish Python test results
        if: ${{ inputs.language == 'python' }}
        kind: test
        uses: cloudbees-io/publish-test-results@v1
        with:
          test-type: JUnit
          folder-name: ${{ cloudbees.workspace }}

      - name: Publish Python evidence
        if: ${{ inputs.language == 'python' }}
        kind: test
        uses: cloudbees-io/publish-evidence-item@v1
        with:
          format: MARKDOWN
          content: |
            ## Test Stage (Python)
            Code coverage (if available):
            ${{ steps.PyTests.outputs.CODE_COVERAGE }}

      # ---------- Normalize job output for callers ----------
      - name: Choose coverage output
        id: ChooseCoverage
        uses: docker://alpine:3.20
        env:
          GO_COV: ${{ steps.GoTests.outputs.CODE_COVERAGE }}
          NODE_COV: ${{ steps.NodeTests.outputs.CODE_COVERAGE }}
          PY_COV: ${{ steps.PyTests.outputs.CODE_COVERAGE }}
        run: |
          set -eu
          if [ -n "${GO_COV:-}" ]; then
            printf '%s\n' "$GO_COV" > "$CLOUDBEES_OUTPUTS/CODE_COVERAGE"
          elif [ -n "${NODE_COV:-}" ]; then
            printf '%s\n' "$NODE_COV" > "$CLOUDBEES_OUTPUTS/CODE_COVERAGE"
          elif [ -n "${PY_COV:-}" ]; then
            printf '%s\n' "$PY_COV" > "$CLOUDBEES_OUTPUTS/CODE_COVERAGE"
          else
            { echo '```'; echo '(no coverage output captured)'; echo '```'; } > "$CLOUDBEES_OUTPUTS/CODE_COVERAGE"
          fi
