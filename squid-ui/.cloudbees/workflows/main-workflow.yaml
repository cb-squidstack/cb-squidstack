apiVersion: automation.cloudbees.io/v1alpha1
kind: workflow
name: My workflow
on:
  push:
    branches:
      - "**"
  workflow_dispatch:
env:
  APP_NAME: squid-ui
  NAMESPACEPROD: squidstack-prod
  NAMESPACEPREPROD: squidstack-pre-prod
jobs:
  run-tests:
    outputs:
      CODE_COVERAGE: ${{ steps.RunUnitTest.outputs.CODE_COVERAGE }}
    steps:
      - uses: cloudbees-io/checkout@v1
        name: Get source code
      - name: Run unit tests
        id: RunUnitTest
        kind: test
        uses: docker://golang:1.21-alpine
        run: |
          apk add --no-cache git curl bash
          go install github.com/jstemmer/go-junit-report@latest
          go test -v ./... -coverprofile=coverage.out | go-junit-report > report.xml
          go tool cover -func=coverage.out >> $CLOUDBEES_OUTPUTS/CODE_COVERAGE
      - name: Publish test results
        uses: cloudbees-io/publish-test-results@v1
        with:
          test-type: JUnit
          folder-name: ./report.xml
      - name: Publish evidence
        uses: cloudbees-io/publish-evidence-item@v1
        with:
          content: |-
            ## Test code coverage
            ${{ steps.RunUnitTest.outputs.CODE_COVERAGE }}
          format: MARKDOWN
  build-container-image:
    steps:
      - name: Get source code
        kind: build
        uses: cloudbees-io/checkout@v1
      - name: Configure container registry credentials
        uses: cloudbees-io/configure-oci-credentials@v1
        continue-on-error: true
        id: dockerconfig
        with:
          registry: https://index.docker.io/v1/
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build Container
        kind: build
        uses: cloudbees-io/kaniko@v1
        with:
          destination: ${{ secrets.DOCKERHUB_USER }}/cd-squidstack-squid-ui:${{ cloudbees.scm.sha }},${{ secrets.DOCKERHUB_USER }}/cd-squidstack-squid-ui:latest
          tar-path: container-image.tar
          build-args: BUILDKIT_CONTEXT_KEEP_GIT_DIR=1,BUILDKIT_INLINE_CACHE=1
      - name: Upload binary from container build
        uses: cloudbees-io/asset-chain-utils/upload-binary@v1
        continue-on-error: true
        id: upload-binary
        with:
          file-path: container-image.tar
          file-type: BINARY_CONTAINER
          debug: "true"
      - name: Publish evidence
        uses: cloudbees-io/publish-evidence-item@v1
        with:
          content: |-
            ## Built and pushed image to docker hub

            [Docker Hub](https://hub.docker.com/repository/docker/gururepservice/cd-squidstack-squid-ui/tags)

            Deployed cd-squidstack-squid-ui:${{ cloudbees.scm.sha }}
          format: MARKDOWN
      - name: Register build artifact
        with:
          version: ${{ cloudbees.scm.sha }}
          url: ${{ secrets.DOCKERHUB_USER }}/cd-squidstack-squid-ui:${{ cloudbees.scm.sha }}
          name: ${{ secrets.DOCKERHUB_USER }}/cd-squidstack-squid-ui
        uses: cloudbees-io/register-build-artifact@v1
    needs: run-tests
  scan:
    outputs:
      BLOCKER_COUNT: ${{ steps.FetchSonarQubeIssues.outputs.BLOCKER_COUNT }}
      CRITICAL_COUNT: ${{ steps.FetchSonarQubeIssues.outputs.CRITICAL_COUNT }}
      MAJOR_COUNT: ${{ steps.FetchSonarQubeIssues.outputs.MAJOR_COUNT }}
      MINOR_COUNT: ${{ steps.FetchSonarQubeIssues.outputs.MINOR_COUNT }}
    steps:
      - name: Checkout
        uses: cloudbees-io/checkout@v1
      - name: Run Go test coverage
        kind: test
        uses: docker://golang:1.21-alpine
        run: |
          go test ./... -coverprofile=coverage.out
          go install github.com/axw/gocov/gocov@v1.1.0
          go install github.com/AlekSi/gocov-xml@v1.1.0
          gocov convert coverage.out | gocov-xml > coverage.xml
      - uses: cloudbees-io/sonarqube-bundled-sast-scan-code@v1
        name: Scan with SonarQube
        kind: scan
        continue-on-error: true
        with:
          language: LANGUAGE_GO
          cover-file-name: coverage.xml
          sonar-exclusion: test/*
      - name: Fetch SonarQube Issues
        id: FetchSonarQubeIssues
        uses: docker://alpine/git:latest
        run: |
          apk add --no-cache curl jq
          curl -u ${{ secrets.SONAR_USER }}:${{ secrets.SONAR_TOKEN }} \
          "https://sonarqube.cb-demos.io/api/issues/search?componentKeys=HackersOrganized&severities=BLOCKER,CRITICAL,MAJOR,MINOR" \
          -o sonar-issues.json
          BLOCKER_COUNT=$(jq '[.issues[] | select(.severity=="BLOCKER")] | length' sonar-issues.json) 
          CRITICAL_COUNT=$(jq '[.issues[] | select(.severity=="CRITICAL")] | length' sonar-issues.json)
          MAJOR_COUNT=$(jq '[.issues[] | select(.severity=="MAJOR")] | length' sonar-issues.json)
          MINOR_COUNT=$(jq '[.issues[] | select(.severity=="MINOR")] | length' sonar-issues.json)

          echo "${BLOCKER_COUNT}" >> $CLOUDBEES_OUTPUTS/BLOCKER_COUNT
          echo "${CRITICAL_COUNT}" >> $CLOUDBEES_OUTPUTS/CRITICAL_COUNT
          echo "${MAJOR_COUNT}" >> $CLOUDBEES_OUTPUTS/MAJOR_COUNT
          echo "${MINOR_COUNT}" >> $CLOUDBEES_OUTPUTS/MINOR_COUNT
      - name: Publish evidence
        uses: cloudbees-io/publish-evidence-item@v1
        with:
          content: |-
            ## SonarQube Analysis Results

            | Severity       | Issue Count |
            |----------------|-------------|
            | BLOCKER        | ${{ steps.FetchSonarQubeIssues.outputs.BLOCKER_COUNT }} |
            | CRITICAL       | ${{ steps.FetchSonarQubeIssues.outputs.CRITICAL_COUNT }} |
            | MAJOR          | ${{ steps.FetchSonarQubeIssues.outputs.MAJOR_COUNT }} |
            | MINOR          | ${{ steps.FetchSonarQubeIssues.outputs.MINOR_COUNT }} |
          format: MARKDOWN
  deployPreProd:
    environment: preprod
    steps:
      - name: Checkout
        uses: cloudbees-io/checkout@v1
      - uses: cashokannamalai/kubeconfig@v1
        name: Set kubeconfig
        with:
          secname: ${{ secrets.kubeconfig_preprod }}
      - id: install-chart
        name: Install helm chart
        uses: cloudbees-io/helm-install@v1
        with:
          chart-location: ${{ cloudbees.workspace }}/chart
          release-name: ${{ env.APP_NAME }}
          namespace: ${{ env.NAMESPACEPREPROD }}
          values: |
            image:
              repository: ${{ secrets.DOCKERHUB_USER }}/cd-squidstack-squid-ui
              tag: ${{ cloudbees.scm.sha }}
            ingress:
              hostName: ${{ env.APP_NAME }}-${{ env.NAMESPACEPREPROD }}.guru-rep.sa-demo.beescloud.com 
      - name: Publish evidence
        uses: cloudbees-io/publish-evidence-item@v1
        with:
          content: |-
            ## Deployed environment
            [Pre Production frontend](https://${{ env.APP_NAME }}-${{ env.NAMESPACEPREPROD }}.guru-rep.sa-demo.beescloud.com/)

            Running hackers-organized:${{ cloudbees.scm.sha }}
          format: MARKDOWN
      - name: Register_deployed_artifact
        uses: https://github.com/cloudbees-io/register-deployed-artifact@v1
        with:
          name: ${{ secrets.DOCKERHUB_USER }}/cd-squidstack-squid-ui
          version: ${{ cloudbees.scm.sha }}
          url: ${{ secrets.DOCKERHUB_USER }}/cd-squidstack-squid-ui:${{ cloudbees.scm.sha }}
          digest: ""
          target-environment: preprod
    needs:
      - build-container-image
      - scan
